Create Regular Expression
---------------------------------------------------------
A complete list of constructs for building regular expressions can be found in the JDK documentation for the Pattern
class for package java.util.regex:

                    Characters
---------------------------------------------------------------
    B           The specific character B
---------------------------------------------------------------
    \xhh        Character with hex value oxhh
---------------------------------------------------------------
    \uhhhhh     The Unicode character with hex representation oxhhhh
---------------------------------------------------------------
    \t          Tab( " " blank space)
---------------------------------------------------------------
    \n          Newline
---------------------------------------------------------------
    \r          Carriage return
---------------------------------------------------------------
    \f          Form feed
---------------------------------------------------------------
    \e          Escape
---------------------------------------------------------------


The power of regular expressions begins to appear when you are defining
character classes. Here are some typical ways to create character classes,
and some predefined classes:


                    Character Classes
---------------------------------------------------------------
    .           Any character
---------------------------------------------------------------
    [abc]       Any of the characters a, b or c (same as a|b|c)
---------------------------------------------------------------
    [^abc]      Any characters except a, b and c (negation)
---------------------------------------------------------------
    [a-zA-Z]    Any character a through z or A through Z(range)
---------------------------------------------------------------
    [abc[hij]]  Any of a,b,c,h,i,j(same as a|b|c|h|i|j)(union)
---------------------------------------------------------------
    [a-z&&[hij] Either h,i,j(intersection);
---------------------------------------------------------------
    \s          A whitespace character(space,tab,newline,
    form feed, carriage return)(" ","  ",\n,\f,\r)
---------------------------------------------------------------
    \S          A non-whitespace([^\s])
---------------------------------------------------------------
    \d          A numeric digit[0-9]
---------------------------------------------------------------
    \D          A non-digit[^0-9]
---------------------------------------------------------------
    \w          A word character[a-zA-Z_0-9]
---------------------------------------------------------------
    \W          A non-word character[^\w]
---------------------------------------------------------------

                    Logical Operators
---------------------------------------------------------------
    XY          X followed by Y
---------------------------------------------------------------
    X|Y         X or Y
---------------------------------------------------------------
    (X)         A capturing group
---------------------------------------------------------------

                    Boundary Matchers
---------------------------------------------------------------
    ^           Beginning of a line
---------------------------------------------------------------
    $           End of a line
---------------------------------------------------------------
    \b          Word boundary
---------------------------------------------------------------
    \B          non-word boundary
---------------------------------------------------------------
    \G          End of the previous match
---------------------------------------------------------------



Summary

    Immutable Strings
        upcase();

    Overloading '+' vs. StringBuilder
        toString();
        append();

    StringBuilder + StringBuffer
        synchronized

    Unintended recursion
        CoffeeCenerator
        ArrayList<Coffee>
        InfiniteRecursion
        toString(){ return "InfiniteRecursion address : " + this + " ." }
        toString(){ return "InfiniteRecursion address : " + super.toString()...}

    Operations on Strings
        The key of String's operation is char[] value
        Constructor
        length();
        charAt();
        getChars();getBytes();
        toCharArray();
        equals();equalsIgnoreCase();
        compareTo();
        contains();
        contentEquals();
        equalsIgnoreCase();
        startsWith();
        endsWith();
        indexOf();
        lastIndexOf();
        subString();
        subSequence();
        concat();
        replace();
        toLowerCase();
        toUpperCase();
        trim();
        valueOf();

    Formatting output
        printf()--printf("Row 1: [%d %f]\n", x, y);

    The Formatter class
        f.format("%s The Turtle is at (%d,%d)\n", name, x, y);

    Format specifiers
        %[argument_index$][flags][width][.precision]conversion

    Formatter conversions
        These are the conversions you’ll come across most frequently:
    ----------------------------------------------------------------
                        Conversion Characters
    ----------------------------------------------------------------
        d  Integral (as decimal)
    ----------------------------------------------------------------
        c  Unicode character
    ----------------------------------------------------------------
        b  Boolean value
    ----------------------------------------------------------------
        s  String
    ----------------------------------------------------------------
        f  Floating point (as decimal)
    -----------------------------------------------------------------
        e  Floating point (in scientific notation)
    -----------------------------------------------------------------
        x  Integral (as hex)
    ----------------------------------------------------------------
        h  Hash code (as hex)
    ----------------------------------------------------------------
        %  Literal "%"
    ----------------------------------------------------------------

    Regular Expressions

    Basic
        -?\\d+
        (-|\\+)?\\d+
        (-I\\+)?
        String.split(String regex);
        String.split(String regex, int limit);

    Creating regular expressions
        line 6-79 above this txt;


    Quantifiers
        Greedy
        Reluctant
        Possessive

        Greedy Reluctant Possessive     Matches
        X?      X??         X?+ X,      one or none
        X*      X*?         x*+ X,      zero or more
        x+      x+?         X++ X,      one or more
        X{n}    X{n}?       X{n}+ X,    exactly n times
        X{n,}   X{n,}?      X{n,}+ X,   at least n times
        X{n,m}  X{n,m}?     X{n,m}+ X,  at least n but not more than m times

    CharSequence
        interface CharSequence {
            charAt(int i);
            length();
            subSequence(int start,| int end);
            toString();
        }

    Pattern and Matcher
        Pattern.compile()
        Pattern.matches();
        Matcher.find();
        Matcher.group();
        Matcher.group(int index);
        Matcher.start();
        Matcher.end();
        Matcher.split(String input);
        String.split(String regex);
        Matcher.split(String input, int limit);
        String.split(String regex, int limit);
        Matcher.replaceAll(String replacement);
        Matcher.replaceFirst(String replacement);
        Matcher.reset();

    Pattern flags
        Compile Flag                            Effect
        Pattern.CANON_EQ                Two characters will be considered to
                                        match if, and only if, their full canonical
                                        decompositions match. The expression
                                        ‘\u003F’, for example, will match the
                                        string ‘?’ when this flag is specified. By
                                        default, matching does not take canonical
                                        equivalence into account.

        Pattern.CASE INSENSITIVE (?i)   By default, case-insensitive matching
                                        assumes that only characters in the USASCII character set are being matched.
                                        This flag allows your pattern to match
                                        without regard to case (upper or lower).
                                        Unicode-aware case-insensitive matching
                                        can be enabled by specifying the
                                        UNICODE_CASE flag in conjunction
                                        with this flag.

        Pattern.COMMENTS (?x)           In this mode, whitespace is ignored, and
                                        embedded comments starting with # are
                                        ignored until the end of a line. Unix lines
                                        mode can also be enabled via the
                                        embedded flag expression.

        Pattern.DOTALL (?s)             In dotall mode, the expression’.’ matches
                                        any character, including a line terminator.
                                        By default, the ‘.’ expression does not
                                        match line terminators.

        Pattern.MULTILINE (?m)          In multiline mode, the expressions ‘^’ and
                                        ‘$’ match the beginning and ending of a
                                        line, respectively.’^’ also matches the
                                        beginning of the input string, and ‘$’ also
                                        matches the end of the input string. By
                                        default, these expressions only match at
                                        the beginning and the end of the entire
                                        input string.

        Pattern.UNICODE CASE (?u)       Case-insensitive matching, when enabled
                                        by the CASE_INSENSITIVE flag, is
                                        done in a manner consistent with the
                                        Unicode Standard. By default, caseinsensitive matching assumes that only
                                        characters in the US-ASCII character set
                                        are being matched.

        Pattern.UNIX LINES (?d)         In this mode, only the ‘\n’ line terminator
                                        is recognized in the behavior of ‘.’, ‘^’, and
                                        ‘$’.